% ======================================================== %
%   Nimble out-of-band authentication for EAP (EAP-NOOB)   %
%               draft-ietf-emu-eap-noob-03                 %
%                                                          %
% https://datatracker.ietf.org/doc/draft-ietf-emu-eap-noob %
% ======================================================== %

sort
  % Data types
  PeerId_t      = Nat;                  % Peer identifier
  Ver_l         = List(Nat);            % List of supported versions
  PK_t          = Nat;                  % Public key
  Cryptosuite_t = Nat;                  % Cryptosuite identifiers
  Cryptosuite_l = List(Cryptosuite_t);  % List of supported cryptosuites
  N_t           = Nat;                  % Nonce
  Noob_t        = Nat;                  % Noob
  Noob_l        = List(Noob_t);         % List of Noobs

  % NAI (noob@eap-noob.arpa)
  NAI_t = struct
    NAI
  ;

  % Types
  Type_t = struct no_type
    | T0 | T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9
  ;

  % States
  State_t = struct no_state | error
    | S0 | S1 | S2 | S3 | S4
  ;

  % Server/Peer information
  Info_t = struct no_info
    | info
  ;

  % Error codes and messages
  Error_t = struct no_error
  % | E1001   % Invalid NAI
  % | E1002   % Invalid message structure
  % | E1003   % Invalid data
    | E1004   % Unexpected message type
  % | E1007   % Invalid ECDHE key
  % | E2001   % Unwanted peer
    | E2002   % State mismatch, user action required
    | E2003   % Unrecognized OOB message identifier
  % | E2004   % Unexpected peer identifier
    | E3001   % No mutually supported protocol version
    | E3002   % No mutually supported cryptosuite
    | E3003   % No mutually supported OOB direction
    | E4001   % HMAC verification failure
  % | E5001   % Application-specific error
  % | E5002   % Invalid server info
  % | E5003   % Invalid server URL
  % | E5004   % Invalid peer info
  ;

  % Ephemeral Elliptic Curve Diffie-Hellman
  ECDHE_t = struct
    ECDHE(PK1:PK_t, PK2:PK_t)
  ;

  % Key derivation
  K_t = struct no_key
    % Completion (KeyingMode 0)
    | Completion(slice:Nat, Z:ECDHE_t, Np:N_t, Ns:N_t, Noob:Noob_t)
    % Reconnect, rekeying without ECDHE (KeyingMode 1)
    | Rekeying(slice:Nat, Kz:K_t, Np2:N_t, Ns2:N_t)
    % Reconnect, rekeying with ECDHE, same or new cryptosuite (KeyingMode 2/3)
    | RekeyingECDHE(slice:Nat, Z:ECDHE_t, Np2:N_t, Ns2:N_t, Kz:K_t)
  ;

  % 16-byte cryptographic fingerprint Hoob
  Hoob_t = struct H(
    Dir:Nat, Vers:Ver_l, Verp:Nat, PeerId:PeerId_t, Cryptosuites:Cryptosuite_l,
    Dirs:Nat, ServerInfo:Info_t, Cryptosuitep:Cryptosuite_t, Dirp:Nat,
    PeerInfo:Info_t, KeyingMode:Nat, PKs:PK_t, Ns:N_t, PKp:PK_t, Np:N_t,
    Noob:Noob_t)
  ;

  % Message authentication code (MACp, MACs, MACp2, MACs2)
  MAC_t = struct HMAC(K:K_t,
    Type:Nat, Vers:Ver_l, Verp:Nat, PeerId:PeerId_t, Cryptosuites:Cryptosuite_l,
    Dirs:Nat, ServerInfo:Info_t, Cryptosuitep:Cryptosuite_t, Dirp:Nat,
    PeerInfo:Info_t, KeyingMode:Nat, PKs:PK_t, Ns:N_t, PKp:PK_t, Np:N_t,
    Noob:Noob_t)
  ;

  % NoobId
  NoobId_t = struct
    NoobId(Noob:Noob_t)
  ;

  % Data payload
  Payload_t = struct empty ? is_empty
    % Error messages
    | req0(Type:Type_t, PeerId:PeerId_t, ErrorCode:Error_t) ? is_req0
    | res0(Type:Type_t, PeerId:PeerId_t, ErrorCode:Error_t) ? is_res0
    % Common handshake
    | resI(NAI:NAI_t) ? is_resI
    | req1(Type:Type_t) ? is_req1
    | res1(Type:Type_t, PeerId:PeerId_t, State:State_t) ? is_res1
    % Type 2-8 requests and responses
    | req2(Type:Type_t, Vers:Ver_l, PeerId:PeerId_t, Cryptosuites:Cryptosuite_l,
           Dirs:Nat, ServerInfo:Info_t) ? is_req2
    | res2(Type:Type_t, Verp:Nat, PeerId:PeerId_t, Cryptosuitep:Cryptosuite_t,
           Dirp:Nat, PeerInfo:Info_t) ? is_res2
    | req3(Type:Type_t, PeerId:PeerId_t, PKs:PK_t, Ns:N_t) ? is_req3
    | res3(Type:Type_t, PeerId:PeerId_t, PKp:PK_t, Np:N_t) ? is_res3
    | req4(Type:Type_t, PeerId:PeerId_t) ? is_req4
    | res4(Type:Type_t, PeerId:PeerId_t) ? is_res4
    | req5(Type:Type_t, PeerId:PeerId_t) ? is_req5
    | res5(Type:Type_t, PeerId:PeerId_t, NoobId:NoobId_t) ? is_res5
    | req6(Type:Type_t, PeerId:PeerId_t, NoobId:NoobId_t, MACs:MAC_t) ? is_req6
    | res6(Type:Type_t, PeerId:PeerId_t, MACp:MAC_t) ? is_res6
    | req7(Type:Type_t, Vers:Ver_l, PeerId:PeerId_t,
           Cryptosuites:Cryptosuite_l) ? is_req7
    | res7(Type:Type_t, Verp:Nat, PeerId:PeerId_t,
           Cryptosuitep:Cryptosuite_t) ? is_res7
    | req8(Type:Type_t, PeerId:PeerId_t, KeyingMode:Nat, PKs2:PK_t,
           Ns2:N_t) ? is_req8
    | res8(Type:Type_t, PeerId:PeerId_t, PKp2:PK_t, Np2:N_t) ? is_res8
    | req9(Type:Type_t, PeerId:PeerId_t, MACs2:MAC_t) ? is_req9
    | res9(Type:Type_t, PeerId:PeerId_t, MACp2:MAC_t) ? is_res9
  ;

  % ===== Internal data types ===== %
  % Static peer data
  StaticPeerData_t = struct no_static_peer_data
    | static_peer_data (Vers:Ver_l,Cryptosuites:Cryptosuite_l,Dirs:Nat,
                        PeerInfo:Info_t,PKp:PK_t,PKp2:PK_t)
  ;

  % Static server data
  StaticServerData_t = struct no_static_server_data
    | static_server_data (Vers:Ver_l,Cryptosuites:Cryptosuite_l,Dirs:Nat,
                          ServerInfo:Info_t,PKs:PK_t,PKs2:PK_t)
  ;

  % Association data entries at server (keyed by PeerId)
  State_e        = PeerId_t -> State_t;
  Dir_e          = PeerId_t -> Nat;
  Dirs_e         = PeerId_t -> Nat;
  Dirp_e         = PeerId_t -> Nat;
  Vers_e         = PeerId_t -> Ver_l;
  Verp_e         = PeerId_t -> Nat;
  Cryptosuitep_e = PeerId_t -> Cryptosuite_t;
  Cryptosuites_e = PeerId_t -> Cryptosuite_l;
  PeerInfo_e     = PeerId_t -> Info_t;
  PKs_e          = PeerId_t -> PK_t;
  PKp_e          = PeerId_t -> PK_t;
  Ns_e           = PeerId_t -> N_t;
  Np_e           = PeerId_t -> N_t;
  Noob_e         = PeerId_t -> Noob_t;
  Noobs_e        = PeerId_t -> Noob_l;
  Kz_e           = PeerId_t -> K_t;
  KeyingMode_e   = PeerId_t -> Nat;

act
  % SND_xxx    = send to channel multi-action
  % SND_xxx_O  = send to channel, action on sender side
  % SND_xxx_I  = send to channel, action on channel side
  % RCV_xxx    = receive from channel multi-action
  % RCV_xxx_O  = receive from channel, action on channel side
  % RCV_xxx_I  = receive from channel, action on receiver side

  % == EAP-Request/Identity == %
  SND_EAP_REQ_ID,
  SND_EAP_REQ_ID_O,
  SND_EAP_REQ_ID_I,
  RCV_EAP_REQ_ID,
  RCV_EAP_REQ_ID_O,
  RCV_EAP_REQ_ID_I: Payload_t;

  % == EAP-Response/Identity == %
  SND_EAP_RES_ID,
  SND_EAP_RES_ID_O,
  SND_EAP_RES_ID_I,
  RCV_EAP_RES_ID,
  RCV_EAP_RES_ID_O,
  RCV_EAP_RES_ID_I: Payload_t;

  % == EAP-Request/EAP-NOOB == %
  SND_EAP_REQ,
  SND_EAP_REQ_O,
  SND_EAP_REQ_I,
  RCV_EAP_REQ,
  RCV_EAP_REQ_O,
  RCV_EAP_REQ_I: Payload_t;

  % == EAP-Response/EAP-NOOB == %
  SND_EAP_RES,
  SND_EAP_RES_O,
  SND_EAP_RES_I,
  RCV_EAP_RES,
  RCV_EAP_RES_O,
  RCV_EAP_RES_I: Payload_t;

  % == EAP-Failure == %
  SND_EAP_FAIL;
  SND_EAP_FAIL_O;
  SND_EAP_FAIL_I;
  RCV_EAP_FAIL;
  RCV_EAP_FAIL_O;
  RCV_EAP_FAIL_I;

  % == EAP-Success == %
  SND_EAP_SUCC;
  SND_EAP_SUCC_O;
  SND_EAP_SUCC_I;
  RCV_EAP_SUCC;
  RCV_EAP_SUCC_O;
  RCV_EAP_SUCC_I;

  % == OOB messages == %
  SND_OOB_P2S,
  SND_OOB_P2S_O,
  SND_OOB_P2S_I,
  RCV_OOB_P2S,
  RCV_OOB_P2S_O,
  RCV_OOB_P2S_I,
  SND_OOB_S2P,
  SND_OOB_S2P_O,
  SND_OOB_S2P_I,
  RCV_OOB_S2P,
  RCV_OOB_S2P_O,
  RCV_OOB_S2P_I: PeerId_t # Noob_t # Hoob_t;

  % == Random value generation == %
  % PeerId
  RNG_PID:       PeerId_t;
  GEN_PEERID_RNG,
  GEN_PEERID:    PeerId_t;
  % Nonce
  RNG_NONCE:     N_t;
  GEN_NONCE_RNG,
  GEN_NONCE:     N_t;
  % Noob
  RNG_NOOB:      Noob_t;
  GEN_NOOB_RNG,
  GEN_NOOB:      Noob_t;

  % Max number of values generated
  MAX_PEERIDS_REACHED;
  MAX_NOOBS_REACHED;
  MAX_NONCES_REACHED;

  % ======================================= %
  % == FOR TESTING AND VERIFICATION ONLY == %
  % ==      NOT PART OF THE PROTOCOL     == %

  % == Query current server/peer state == %
  SERV_STATE,
  PEER_STATE:   PeerId_t # State_t;

  % == KeyingMode == %
  KEYING_MODE:  PeerId_t # Nat;

  % == Error message == %
  LOG_ERROR:    PeerId_t # Error_t;

  % == Log lost messages in the channels == %
  MESSAGE_LOST: Type_t;
  % ======================================= %

map
  % Static data structures
  static_peer_data: StaticPeerData_t;
  static_server_data: StaticServerData_t;

  % Constants
  max_peers:  Nat;  % Max PeerIds that can be generated
  max_noobs:  Nat;  % Max Noob values that can be generated
  max_nonces: Nat;  % Max nonces that can be generated

  % Data entries
  state_m:        State_e;
  dir_m:          Dir_e;
  dirs_m:         Dirs_e;
  dirp_m:         Dirp_e;
  vers_m:         Vers_e;
  verp_m:         Verp_e;
  cryptosuites_m: Cryptosuites_e;
  cryptosuitep_m: Cryptosuitep_e;
  peerinfo_m:     PeerInfo_e;
  pks_m:          PKs_e;
  pkp_m:          PKp_e;
  ns_m:           Ns_e;
  np_m:           Np_e;
  noob_m:         Noob_e;
  noobs_m:        Noobs_e;
  kz_m:           Kz_e;
  keyingmode_m:   KeyingMode_e;

var
  p: PeerId_t;

eqn
  % Initialize static data structures at peer and server
  %   Version(s), Cryptosuite(s), Dir, PeerInfo, PKp, PKp2
  static_peer_data = static_peer_data(
     [1], [1,2], 3, % @P
     info, 1, 2
  );
  %   Version(s), Cryptosuite(s), Dir, ServerInfo, PKp, PKp2
  static_server_data = static_server_data(
    [1], [1,2], 3, % @S
    info, 3, 4
  );

  % Maximum number of PeerIds, Noobs and nonces
  max_peers  = 1; % @M1
  max_noobs  = 1; % @M2
  max_nonces = 4; % @M3

  % Default values for the server
  state_m(p)        = S0;
  dir_m(p)          = 0;
  dirs_m(p)         = 0;
  dirp_m(p)         = 0;
  vers_m(p)         = [];
  verp_m(p)         = 0;
  cryptosuitep_m(p) = 0;
  cryptosuites_m(p) = [];
  peerinfo_m(p)     = no_info;
  pks_m(p)          = 0;
  pkp_m(p)          = 0;
  ns_m(p)           = 0;
  np_m(p)           = 0;
  noob_m(p)         = 0;
  noobs_m(p)        = [];
  kz_m(p)           = no_key;
  keyingmode_m(p)   = 0;

proc
  % In-band channel
  InBandChannel =
    sum Payload:Payload_t . (
      % EAP-Request/Identity
      ( SND_EAP_REQ_ID_I(Payload)
      . RCV_EAP_REQ_ID_O(Payload)
      . InBandChannel )
      +
      % EAP-Response/Identity
      ( SND_EAP_RES_ID_I(Payload)
      . RCV_EAP_RES_ID_O(Payload)
      . InBandChannel )
      +
      % EAP-Request/EAP-NOOB
      ( SND_EAP_REQ_I(Payload)
      . RCV_EAP_REQ_O(Payload)
      . InBandChannel )
      +
      % EAP-Response/EAP-NOOB
      ( SND_EAP_RES_I(Payload)
      . RCV_EAP_RES_O(Payload)
      . InBandChannel )
    )
    % EAP-Success
    + SND_EAP_SUCC_I
    . RCV_EAP_SUCC_O
    . InBandChannel
    % EAP-Failure
    + SND_EAP_FAIL_I
    . RCV_EAP_FAIL_O
    . InBandChannel
  ;

  % Out-of-band channel
  OOBChannel =
    sum PeerId':PeerId_t, Noob':Noob_t, Hoob':Hoob_t . (
      ( SND_OOB_S2P_I(PeerId',Noob',Hoob')
      . RCV_OOB_S2P_O(PeerId',Noob',Hoob')
      . OOBChannel )
      +
      ( SND_OOB_P2S_I(PeerId',Noob',Hoob')
      . RCV_OOB_P2S_O(PeerId',Noob',Hoob')
      . OOBChannel )
    )
  ;

  % Random number generator
  Rng(P:PeerId_t, N:N_t, NOOB:Noob_t) =
    (P <= max_peers) -> (
       GEN_PEERID_RNG(P)
       . Rng(P+1,N,NOOB)
    ) <> MAX_PEERIDS_REACHED . Rng(P,N,NOOB)
    +
    (N <= max_nonces) -> (
       GEN_NONCE_RNG(N)
       . Rng(P,N+1,NOOB)
    ) <> MAX_NONCES_REACHED . Rng(P,N,NOOB)
    +
    (NOOB <= max_noobs) -> (
       GEN_NOOB_RNG(NOOB)
       . Rng(P,N,NOOB+1)
    ) <> MAX_NOOBS_REACHED . Rng(P,N,NOOB)
  ;

  % Authenticator
  Authenticator =
    SND_EAP_REQ_ID_O(empty)
    . Authenticator
  ;

  % Peer
  Peer(spd:StaticPeerData_t, peerid:PeerId_t, state:State_t,
       dir:Nat, dirp:Nat, dirs:Nat, vers:Ver_l, verp:Nat,
       cryptosuite':Cryptosuite_t, cryptosuitep:Cryptosuite_t,
       cryptosuites:Cryptosuite_l, cryptosuite_prev:Cryptosuite_t,
       serverinfo:Info_t,
       pks:PK_t, pks2:PK_t, ns:N_t, ns2:N_t, np:N_t, np2:N_t,
       kz:K_t, kzprev:K_t,
       noobs:Noob_l, keyingmode:Nat, expected_type:List(Type_t)
  ) =
    ( RCV_EAP_REQ_ID_I(empty)
      . SND_EAP_RES_ID_O(resI(NAI))
      . Peer(expected_type = [T1]) )
    + sum Payload:Payload_t . (
        RCV_EAP_REQ_I(Payload)
        . (!(Type(Payload) in expected_type)) -> (
              SND_EAP_RES_O(res0(T0, PeerId(Payload), E1004))
              . RCV_EAP_FAIL_I
              . Peer(expected_type = [T0])
          )
          <> (is_req0(Payload)) -> (
               RCV_EAP_FAIL_I
               . (ErrorCode(Payload) == E2002) -> (
                   Peer(state = error)
               )
               <> Peer(expected_type = [T0])
          )
          <> (is_req1(Payload)) -> (
               SND_EAP_RES_O(res1(T1,peerid,state))
               . (state == S0) -> (
                    Peer(expected_type = [T2])
               )
               <> (state == S1) -> (
                    Peer(expected_type = [T4,T5])
               )
               <> (state == S2) -> (
                    Peer(expected_type = [T5])
               )
               <> (state == S3) -> (
                    Peer(expected_type = [T7])
               )
               <> (state == S4) -> (
                    Peer(expected_type = [T7])
               )
          )
          <> (is_req2(Payload)) -> (
               % No mutually supported protocol version
               (!(exists Version:Nat . (
                 Version in Vers(spd) && Version in Vers(Payload)
               ))) -> (
                 SND_EAP_RES_O(res0(T0, PeerId(Payload), E3001))
                 . RCV_EAP_FAIL_I
                 . Peer(expected_type = [T0])
               )
               % No mutually supported cryptosuite
               <> (!(exists C:Cryptosuite_t . (
                 C in Cryptosuites(Payload) && C in Cryptosuites(spd)
               ))) -> (
                 SND_EAP_RES_O(res0(T0, PeerId(Payload), E3002))
                 . RCV_EAP_FAIL_I
                 . Peer(expected_type = [T0])
               )
               % No mutually supported OOB direction
               <> ((Dirs(Payload)) != 3 && (Dirs(Payload)) != Dirs(spd)) -> (
                 SND_EAP_RES_O(res0(T0, PeerId(Payload), E3003))
                 . RCV_EAP_FAIL_I
                 . Peer(expected_type = [T0])
               )
               <> sum C:Cryptosuite_t, V:Nat, D:Nat . (
                 (C in Cryptosuites(Payload)
                   && C in Cryptosuites(spd)
                   && V in Vers(Payload)
                   && V in Vers(spd)
                   && ((D == Dirs(spd) && D == Dirs(Payload))
                       || (D == Dirs(spd) && Dirs(Payload) == 3)
                       || (D == Dirs(Payload) && Dirs(spd) == 3))
                 ) -> (
                   SND_EAP_RES_O(res2(T2,V,PeerId(Payload),C,D,PeerInfo(spd)))
                   . Peer (
                       peerid = PeerId(Payload),
                       vers = Vers(Payload),
                       cryptosuites = Cryptosuites(Payload),
                       dirs = Dirs(Payload),
                       serverinfo = ServerInfo(Payload),
                       cryptosuitep = C,
                       verp = V,
                       dirp = D,
                       dir = D,
                       expected_type = [T3]
                   )
                 )
               )
          )
          <> (is_req3(Payload)) -> (
               sum N:N_t . (
                 GEN_NONCE(N)
                 . SND_EAP_RES_O(res3(T3,peerid,PKp(spd),N))
                 . Peer (
                     pks = PKs(Payload),
                     ns = Ns(Payload),
                     np = N,
                     expected_type = [no_type]
                 )
               )
          )
          <> (is_req4(Payload)) -> (
               SND_EAP_RES_O(res4(T4,peerid))
               . Peer(expected_type = [no_type])
          )
          <> (is_req5(Payload)) -> (
            sum Noob':Noob_t . (
              (Noob' in noobs) -> (
                SND_EAP_RES_O(res5(T5,peerid,NoobId(Noob')))
                . Peer(expected_type = [T6])
              )
            )
          )
          <> (is_req6(Payload)) -> (
             (!(exists Noob':Noob_t . (
               NoobId(Noob') == NoobId(Payload) && Noob' in noobs
             ))) -> (
               SND_EAP_RES_O(res0(T0, PeerId(Payload), E2003))
               . RCV_EAP_FAIL_I
               . PEER_STATE(PeerId(Payload), S1)
               . Peer(expected_type = [no_type])
             )
             <> sum Noob':Noob_t . (
               (NoobId(Noob') == NoobId(Payload)) -> (
                 (MACs(Payload) == HMAC(
                   Completion(224,ECDHE(pks,PKp(spd)),np,ns,Noob'),
                   2,vers,verp,peerid,cryptosuites,dirs,serverinfo,cryptosuitep,
                   dirp,PeerInfo(spd),0,pks,ns,PKp(spd),np,Noob')
                 ) -> (
                  SND_EAP_RES_O(res6(T6,peerid,HMAC(
                    Completion(256,ECDHE(pks,PKp(spd)),np,ns,Noob'),
                    1,vers,verp,peerid,cryptosuites,
                    dirs,serverinfo,cryptosuitep,dirp,
                    PeerInfo(spd),0,pks,ns,PKp(spd),np,Noob')
                  ))
                  . Peer (
                     kz = Completion(288, ECDHE(PKp(spd),pks), np, ns, Noob'),
                     expected_type = [no_type]
                  )
                 )
                 <> SND_EAP_RES_O(res0(T0, PeerId(Payload), E4001))
                  . Peer(expected_type = [no_type])
               )
             )
          )
          <> (is_req7(Payload)) -> (
              % No mutually supported protocol version
              (!(exists Version:Nat . (
                Version in Vers(spd) && Version in Vers(Payload)
              ))) -> (
                SND_EAP_RES_O(res0(T0, PeerId(Payload), E3001))
                . RCV_EAP_FAIL_I
                . Peer(expected_type = [no_type])
              )
              % No mutually supported cryptosuite
              <> (!(exists C:Cryptosuite_t . (
                C in Cryptosuites(Payload) && C in Cryptosuites(spd)
              ))) -> (
                SND_EAP_RES_O(res0(T0, PeerId(Payload), E3002))
                . RCV_EAP_FAIL_I
                . Peer(expected_type = [no_type])
              )
              <> sum C:Cryptosuite_t, V:Nat . (
                  (C in Cryptosuites(Payload) && C in Cryptosuites(spd)
                    && C >= cryptosuitep
                    && V in Vers(Payload)
                    && V in Vers(spd)
                    && V >= verp
                  ) -> (
                    SND_EAP_RES_O(res7(T7,V,peerid,C))
                    . Peer (
                        vers = vers,
                        cryptosuites = cryptosuites,
                        cryptosuite' = C,
                        verp = V,
                        expected_type = [T8]
                    )
                  )
              )
          )
          <> (is_req8(Payload)) -> (
               sum N2:N_t . (
                 GEN_NONCE(N2)
                 . (KeyingMode(Payload) == 1) -> (
                     SND_EAP_RES_O(res8(T8,peerid,0,N2))
                     . Peer (
                        keyingmode = 1,
                        np2 = N2,
                        ns2 = Ns2(Payload),
                        expected_type = [T9]
                     )
                 )
                 <> (KeyingMode(Payload) == 2 || KeyingMode(Payload) == 3) -> (
                      SND_EAP_RES_O(res8(T8,peerid,PKp2(spd),N2))
                      . Peer (
                          keyingmode = KeyingMode(Payload),
                          pks2 = PKs2(Payload),
                          np2 = N2,
                          ns2 = Ns2(Payload),
                          expected_type = [T9]
                      )
                 )
               )
          )
          <> (is_req9(Payload)) -> (
               sum Kz':K_t . ((Kz' == kz || Kz' == kzprev) -> ((
                 % KeyingMode == 1
                 (keyingmode == 1 && MACs2(Payload) == HMAC(
                   Rekeying(224, Kz', np2, ns2),
                   2,vers,verp,peerid,cryptosuites,0,serverinfo,
                   cryptosuite',0,PeerInfo(spd),keyingmode,0,ns2,0,np2,0)
                 ) ||
                 % KeyingMode == 2/3
                 (keyingmode > 1 && MACs2(Payload) == HMAC(
                   RekeyingECDHE(224, ECDHE(pks2, PKp2(spd)),np2, ns2, Kz'),
                   2,vers,verp,peerid,cryptosuites,0,serverinfo,cryptosuite',0,
                   PeerInfo(spd),keyingmode,pks2,ns2,PKp2(spd),np2,0)
                 )
               ) -> (
                sum Kz'':K_t, KzPrev':K_t, Kmp2:K_t, CryptosuitePrev':Cryptosuite_t . (
                  ((keyingmode == 1
                    && Kmp2 == Rekeying(256,Kz',np2,ns2)
                    && CryptosuitePrev' == 0
                    && KzPrev' == no_key
                    && Kz'' == Kz'
                   ) ||
                   (keyingmode == 2
                    && Kmp2 == RekeyingECDHE(256,ECDHE(PKp2(spd),pks2),np2,ns2,Kz')
                    && CryptosuitePrev' == 0
                    && KzPrev' == no_key
                    && Kz'' == Kz'
                   ) ||
                   (keyingmode == 3
                    && Kmp2 == RekeyingECDHE(256,ECDHE(PKp2(spd),pks2),np2,ns2,Kz')
                    && CryptosuitePrev' == cryptosuitep
                    && KzPrev' == Kz'
                    && Kz'' == Rekeying(288, Kz', np2, ns2)
                  )) -> (
                    (keyingmode == 1) -> (
                      SND_EAP_RES_O(res9(T9,peerid,HMAC(
                       Kmp2,1,vers,verp,peerid,cryptosuites,0,serverinfo,
                       cryptosuite',0,PeerInfo(spd),keyingmode,0,ns2,0,np2,0
                      )))
                    )
                    <> (keyingmode == 2 || keyingmode == 3) -> (
                         SND_EAP_RES_O(res9(T9,peerid,HMAC(
                          Kmp2,1,vers,verp,peerid,cryptosuites,0,serverinfo,
                          cryptosuite',0,PeerInfo(spd),keyingmode,pks2,ns2,
                          PKp2(spd),np2,0
                         )))
                    )
                  ))
                  . Peer (
                      state = S4,
                      cryptosuitep = cryptosuite',
                      cryptosuite_prev = CryptosuitePrev',
                      keyingmode = 0,
                      kz = Kz'',
                      expected_type = [no_type]
                  )
               )
               . SND_EAP_RES_O(res0(T0, PeerId(Payload), E4001))
               . Peer(expected_type = [no_type])))
          )
    )
    + RCV_EAP_FAIL_I
    . (expected_type == [no_type] && (state == S0 || state == S1)) -> (
        PEER_STATE(peerid,S1)
        . Peer (
            state = S1,
            expected_type = [T0]
        )
    )
    + RCV_EAP_SUCC_I
    . (expected_type == [no_type] && state != S0) -> (
        PEER_STATE(peerid,S4)
        . Peer (
            state = S4,
            expected_type = [T0]
        )
    )
    + (expected_type == [T0] && state == S1) -> (
        (dir == 1 || dir == 3) -> (
          sum Noob':Noob_t .(
            GEN_NOOB(Noob')
            . SND_OOB_P2S_O(peerid, Noob', H(
                dirp,vers,verp,peerid,cryptosuites,dirs,serverinfo,cryptosuitep,
                dirp,PeerInfo(spd), 0, pks, ns, PKp(spd), np, Noob')
            )
            . PEER_STATE(peerid,S1)
            . Peer (
                noobs = noobs <| Noob',
                expected_type = [T0]
            )
          )
        )
        + ((dir == 2 || dir == 3)) -> (
            sum Noob':Noob_t,Hoob':Hoob_t . (
              RCV_OOB_S2P_I(peerid,Noob',Hoob')
              . (Hoob' == H(
                  dirp,vers,verp,peerid,cryptosuites,dirs,serverinfo,
                  cryptosuitep,dirp,PeerInfo(spd),0,pks,ns,PKp(spd),np,Noob')
              ) -> (
                PEER_STATE(peerid,S2)
                . Peer (
                    noobs = noobs <| Noob',
                    state = S2,
                    expected_type = [T0]
                )
              )
            )
        )
    )
    + (state == S4 && expected_type == [T0]) -> (
        PEER_STATE(peerid,S3)
        . Peer (
            state = S3,
            expected_type = [T0]
        )
    )
  ;

  %% Server Process
  Server(ssd:StaticServerData_t, state:State_e,
         dir:Dir_e, dirs:Dirs_e, dirp:Dirp_e,
         vers:Vers_e, verp:Verp_e,
         cryptosuites:Cryptosuites_e, cryptosuitep:Cryptosuitep_e,
         peerinfo:PeerInfo_e,
         pks:PKs_e, pks2:PKs_e, pkp:PKp_e, pkp2:PKp_e,
         ns:Ns_e, ns2:Ns_e, np:Np_e, np2:Np_e,
         noob:Noob_e, noobs:Noobs_e,
         kz:Kz_e, keyingmode:KeyingMode_e
  ) =
    ( RCV_EAP_RES_ID_I(resI(NAI))
      . SND_EAP_REQ_O(req1(T1))
      . Server() )
    + sum Payload:Payload_t . (
        RCV_EAP_RES_I(Payload)
        . sum PeerId':PeerId_t .(
            (PeerId' == PeerId(Payload)) -> (
              (is_res1(Payload)) -> (
                ((State(Payload) == S0 &&
                  (state(PeerId') == S0 || state(PeerId') == S1 || state(PeerId') == S2
                 )) ||
                 (state(PeerId') == S0 &&
                  (State(Payload) == S0 || State(Payload) == S1 || State(Payload) == S2
                ))) -> (
                 sum P':PeerId_t . (
                   GEN_PEERID(P')
                   . SND_EAP_REQ_O(req2(T2,Vers(ssd),P',Cryptosuites(ssd),
                                   Dirs(ssd),ServerInfo(ssd)))
                   . Server()
                 )
                )
                <> (State(Payload) == S1 && state(PeerId') == S1) -> (
                     SND_EAP_REQ_O(req4(T4,PeerId'))
                     . Server()
                )
                <> (State(Payload) == S1 && state(PeerId') == S2) -> (
                     SND_EAP_REQ_O(req5(T5,PeerId'))
                     . Server()
                )
                <> (State(Payload) == S2 &&
                    (state(PeerId') == S1 || state(PeerId') == S2
                   )) -> (
                     SND_EAP_REQ_O(req5(T5,PeerId'))
                     . Server()
                   )
                <> (State(Payload) == S3 && (
                     state(PeerId') == S3 || state(PeerId') == S4
                   )) -> (
                     SND_EAP_REQ_O(req7(T7,vers(PeerId'),PeerId',Cryptosuites(ssd)))
                     . Server()
                )
                <> SND_EAP_REQ_O(res0(T0, PeerId', E2002))
                   . SND_EAP_FAIL_O
                   . SERV_STATE(PeerId', error)
                   . Server(state = state[PeerId'->error])
              )
              <> (is_res2(Payload)) -> (
                   sum N:N_t . (
                     GEN_NONCE(N)
                     . SND_EAP_REQ_O(req3(T3,PeerId',PKs(ssd),N))
                     . Server (
                         ssd = ssd,
                         dirs = dirs[PeerId'->Dirs(ssd)],
                         peerinfo = peerinfo[PeerId'->PeerInfo(Payload)],
                         vers = vers[PeerId'->Vers(ssd)],
                         cryptosuites = cryptosuites[PeerId'->Cryptosuites(ssd)],
                         pks = pks[PeerId'->PKs(ssd)],
                         ns = ns[PeerId'->N],
                         dir = dir[PeerId'->Dirp(Payload)],
                         dirp = dirp[PeerId'->Dirp(Payload)],
                         verp = verp[PeerId'->Verp(Payload)],
                         cryptosuitep = cryptosuitep[PeerId'->Cryptosuitep(Payload)]
                     )
                   )
              )
              <> (is_res3(Payload)) -> (
                   SND_EAP_FAIL_O
                   . SERV_STATE(PeerId',S1)
                   . Server (
                       pkp = pkp[PeerId'->PKp(Payload)],
                       np = np[PeerId'->Np(Payload)],
                       state = state[PeerId'->S1]
                   )
              )
              <> (is_res4(Payload)) -> (
                   SND_EAP_FAIL_O
                   . Server()
              )
              <> (is_res5(Payload)) -> (
                (!(exists Noob':Noob_t . (
                  NoobId(Noob') == NoobId(Payload) && Noob' in noobs(PeerId')
                ))) -> (
                  SND_EAP_REQ_O(res0(T0, PeerId(Payload), E2003))
                  . SND_EAP_FAIL_O
                  . SERV_STATE(PeerId(Payload), S1)
                  . Server(state = state[PeerId'->S1])
                )
                <> sum Noob':Noob_t . (
                    (NoobId(Payload) == NoobId(Noob')) -> (
                      SND_EAP_REQ_O(req6(T6,PeerId',NoobId(Payload),HMAC(
                        Completion(224,ECDHE(PKs(ssd),pkp(PeerId')),
                          np(PeerId'),ns(PeerId'),Noob'),
                        2,Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),
                        Dirs(ssd),ServerInfo(ssd),cryptosuitep(PeerId'),
                        dirp(PeerId'),peerinfo(PeerId'),0,PKs(ssd),ns(PeerId'),
                        pkp(PeerId'),np(PeerId'),Noob'
                      )))
                      . Server (
                          kz = kz[PeerId'->Completion(288,ECDHE(pkp(PeerId'),
                               PKs(ssd)),np(PeerId'), ns(PeerId'),Noob')],
                          noob =  noob[PeerId'->Noob']
                      )
                    )
                )
              )
              <> (is_res6(Payload)) -> (
                   (MACp(Payload) == HMAC(
                     Completion(256,ECDHE(PKs(ssd),pkp(PeerId')),np(PeerId'),
                      ns(PeerId'),noob(PeerId')),
                     1,Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),
                     Dirs(ssd),ServerInfo(ssd),cryptosuitep(PeerId'),
                     dirp(PeerId'),peerinfo(PeerId'),0,PKs(ssd),ns(PeerId'),
                     pkp(PeerId'),np(PeerId'),noob(PeerId')
                   )) -> (
                     SND_EAP_SUCC_O
                     . SERV_STATE(PeerId',S4)
                     . Server (
                         state = state[PeerId'->S4]
                     )
                   )
                   <> SND_EAP_REQ_O(req0(T0, PeerId(Payload), E4001))
                   . Server()
              )
              <> (is_res7(Payload)) -> (
                   sum N2:N_t . (
                     GEN_NONCE(N2)
                     . (Cryptosuitep(Payload) == cryptosuitep(PeerId')) -> (
                        (SND_EAP_REQ_O(req8(T8,PeerId',1,0,N2))
                         . Server (
                             verp = verp[PeerId'->Verp(Payload)],
                             cryptosuitep = cryptosuitep[PeerId'->Cryptosuitep(Payload)],
                             keyingmode = keyingmode[PeerId'->1],
                             ns2 = ns2[PeerId'->N2]
                         ))
                       + (SND_EAP_REQ_O(req8(T8,PeerId',2,PKs2(ssd),N2))
                          . Server (
                              verp = verp[PeerId'->Verp(Payload)],
                              cryptosuitep = cryptosuitep[PeerId'->Cryptosuitep(Payload)],
                              keyingmode = keyingmode[PeerId'->2],
                              ns2 = ns2[PeerId'->N2]
                          )
                       )
                     )
                     <> (Cryptosuitep(Payload) != cryptosuitep(PeerId')) -> (
                          SND_EAP_REQ_O(req8(T8,PeerId',3,PKs2(ssd),N2))
                          . Server (
                              verp = verp[PeerId'->Verp(Payload)],
                              cryptosuitep = cryptosuitep[PeerId'->Cryptosuitep(Payload)],
                              keyingmode = keyingmode[PeerId'->3],
                              ns2 = ns2[PeerId'->N2]
                          )
                     )
                   )
              )
              <> (is_res8(Payload)) -> (
                   (keyingmode(PeerId') == 1) -> (
                     SND_EAP_REQ_O(req9(T9, PeerId', HMAC(
                       Rekeying(224, kz(PeerId'), Np2(Payload), ns2(PeerId')),
                       2,Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),0,
                       ServerInfo(ssd),cryptosuitep(PeerId'),0,peerinfo(PeerId'),
                       keyingmode(PeerId'),0,ns2(PeerId'),0,Np2(Payload),0)
                     ))
                     . Server (
                         np2 = np2[PeerId'->Np2(Payload)]
                     )
                   )
                   <> (keyingmode(PeerId') == 2 || keyingmode(PeerId') == 3) -> (
                        SND_EAP_REQ_O(req9(T9, PeerId', HMAC(
                          RekeyingECDHE(224, ECDHE(PKs2(ssd), PKp2(Payload)),
                           Np2(Payload), ns2(PeerId'), kz(PeerId')),
                          2,Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),0,
                          ServerInfo(ssd),cryptosuitep(PeerId'),0,
                          peerinfo(PeerId'),keyingmode(PeerId'),PKs2(ssd),
                          ns2(PeerId'),PKp2(Payload),Np2(Payload),0)
                        ))
                        . Server (
                            np2 = np2[PeerId'->Np2(Payload)],
                            pkp2 = pkp2[PeerId'->PKp2(Payload)],
                            pks2 = pks2[PeerId'->PKs2(Payload)]
                        )
                   )
              )
              <> (is_res9(Payload)) -> (
                   (keyingmode(PeerId') == 1) -> (
                     (MACp2(Payload) == HMAC(
                       Rekeying(256, kz(PeerId'), np2(PeerId'),ns2(PeerId')),
                       1,Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),0,
                       ServerInfo(ssd),cryptosuitep(PeerId'),0,
                       peerinfo(PeerId'),keyingmode(PeerId'),0,ns2(PeerId'),0,
                       np2(PeerId'),0)
                     ) -> (
                       SND_EAP_SUCC_O
                       . KEYING_MODE(PeerId',keyingmode(PeerId'))
                       . SERV_STATE(PeerId',S4)
                       . Server (
                           state = state[PeerId'->S4]
                       )
                     )
                   )
                   <> (keyingmode(PeerId') == 2 || keyingmode(PeerId') == 3) -> (
                        (MACp2(Payload) == HMAC(
                          RekeyingECDHE(256, ECDHE(pkp2(PeerId'), PKs2(ssd)),
                           np2(PeerId'), ns2(PeerId'), kz(PeerId')),
                          1,Vers(ssd),verp(PeerId'),PeerId',
                          Cryptosuites(ssd),0,ServerInfo(ssd),
                          cryptosuitep(PeerId'),0,peerinfo(PeerId'),
                          keyingmode(PeerId'),PKs2(ssd),ns2(PeerId'),
                          pkp2(PeerId'),np2(PeerId'),0)
                        ) -> (
                          SND_EAP_SUCC_O
                          . KEYING_MODE(PeerId',keyingmode(PeerId'))
                          . SERV_STATE(PeerId',S4)
                          . Server (
                              state = state[PeerId'->S4]
                          )
                        )
                   )
                   <> SND_EAP_REQ_O(req0(T0, PeerId(Payload), E4001))
                      . Server()
              )
              <> (is_res0(Payload)) -> (
                   LOG_ERROR(PeerId',ErrorCode(Payload))
                   . Server()
              )
            )
        )
    )
    + sum PeerId':PeerId_t,Noob':Noob_t,Hoob:Hoob_t . (
        (state(PeerId') == S1) -> (
          (dir(PeerId') == 1 || dir(PeerId') == 3) -> (
            RCV_OOB_P2S_I(PeerId',Noob',Hoob)
            . (Hoob == H(
                 dir(PeerId'),Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),
                 Dirs(ssd),ServerInfo(ssd),cryptosuitep(PeerId'),dirp(PeerId'),
                 peerinfo(PeerId'),0,PKs(ssd),ns(PeerId'),pkp(PeerId'),
                 np(PeerId'),Noob')
            ) -> (
              SERV_STATE(PeerId',S2)
              . Server (
                  state = state[PeerId'->S2],
                  noobs = noobs[PeerId'->(noobs(PeerId') <| Noob')]
              )
            )
          )
          + (dir(PeerId') == 2 || dir(PeerId') == 3) -> (
              GEN_NOOB(Noob')
              . SND_OOB_S2P_O(PeerId',Noob',H(
                  dir(PeerId'),Vers(ssd),verp(PeerId'),PeerId',Cryptosuites(ssd),
                  Dirs(ssd),ServerInfo(ssd),cryptosuitep(PeerId'),dirp(PeerId'),
                  peerinfo(PeerId'),0,PKs(ssd),ns(PeerId'),pkp(PeerId'),
                  np(PeerId'),Noob')
              )
              . SERV_STATE(PeerId',S1)
              . Server (
                  noobs = noobs[PeerId'->(noobs(PeerId') <| Noob')]
              )
          )
        )
    )
  ;

init
  allow({
    % EAP-Request/Identity
    SND_EAP_REQ_ID, RCV_EAP_REQ_ID,
    % EAP-Response/Identity
    SND_EAP_RES_ID, RCV_EAP_RES_ID,
    % EAP-Request/EAP-NOOB
    SND_EAP_REQ, RCV_EAP_REQ,
    % EAP-Response/EAP-NOOB
    SND_EAP_RES, RCV_EAP_RES,
    % EAP-Failure
    SND_EAP_FAIL, RCV_EAP_FAIL,
    % EAP-Success
    SND_EAP_SUCC, RCV_EAP_SUCC,
    % OOB messages
    SND_OOB_P2S, RCV_OOB_P2S, SND_OOB_S2P, RCV_OOB_S2P,
    % Server/Peer state
    SERV_STATE, PEER_STATE,
    % KeyingMode
    KEYING_MODE,
    % RNG
    RNG_PID, RNG_NONCE, RNG_NOOB,
    % Error logging
    LOG_ERROR,
    % Lost messages
    MESSAGE_LOST,
    % Max values reached
    MAX_PEERIDS_REACHED, MAX_NOOBS_REACHED, MAX_NONCES_REACHED
  },
  comm({
    % EAP-Request/Identity
    SND_EAP_REQ_ID_O | SND_EAP_REQ_ID_I -> SND_EAP_REQ_ID,
    RCV_EAP_REQ_ID_O | RCV_EAP_REQ_ID_I -> RCV_EAP_REQ_ID,
    % EAP-Response/Identity
    SND_EAP_RES_ID_O | SND_EAP_RES_ID_I -> SND_EAP_RES_ID,
    RCV_EAP_RES_ID_O | RCV_EAP_RES_ID_I -> RCV_EAP_RES_ID,
    % EAP-Request/EAP-NOOB
    SND_EAP_REQ_O    | SND_EAP_REQ_I    -> SND_EAP_REQ,
    RCV_EAP_REQ_O    | RCV_EAP_REQ_I    -> RCV_EAP_REQ,
    % EAP-Response/EAP-NOOB
    SND_EAP_RES_O    | SND_EAP_RES_I    -> SND_EAP_RES,
    RCV_EAP_RES_O    | RCV_EAP_RES_I    -> RCV_EAP_RES,
    % EAP-Failure
    SND_EAP_FAIL_O   | SND_EAP_FAIL_I   -> SND_EAP_FAIL,
    RCV_EAP_FAIL_O   | RCV_EAP_FAIL_I   -> RCV_EAP_FAIL,
    % EAP-Success
    SND_EAP_SUCC_O   | SND_EAP_SUCC_I   -> SND_EAP_SUCC,
    RCV_EAP_SUCC_O   | RCV_EAP_SUCC_I   -> RCV_EAP_SUCC,
    % OOB message
    SND_OOB_P2S_O    | SND_OOB_P2S_I    -> SND_OOB_P2S,
    RCV_OOB_P2S_O    | RCV_OOB_P2S_I    -> RCV_OOB_P2S,
    SND_OOB_S2P_O    | SND_OOB_S2P_I    -> SND_OOB_S2P,
    RCV_OOB_S2P_O    | RCV_OOB_S2P_I    -> RCV_OOB_S2P,
    % Random value generation
    GEN_PEERID_RNG   | GEN_PEERID       -> RNG_PID,
    GEN_NONCE_RNG    | GEN_NONCE        -> RNG_NONCE,
    GEN_NOOB_RNG     | GEN_NOOB         -> RNG_NOOB
  },
       Rng(1,1,1)
    || Authenticator
    || InBandChannel
    || OOBChannel
    || Peer(static_peer_data,0,S0,0,0,0,[],0,0,0,[],0,no_info,0,0,0,0,0,0,
            no_key,no_key,[],0,[T0])
    || Server(static_server_data,state_m,dir_m,dirs_m,dirp_m,vers_m,verp_m,
              cryptosuites_m,cryptosuitep_m,peerinfo_m,pks_m,pks_m,pkp_m,pkp_m,
              ns_m,ns_m,np_m,np_m,noob_m,noobs_m,kz_m,keyingmode_m)
  ));
